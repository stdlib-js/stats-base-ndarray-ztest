{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-ztest';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a one-dimensional ndarray.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   a one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the mean under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n*\n* // Define a one-dimensional input ndarray:\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( opts.dtype, xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the mean value under the null hypothesis:\n* var mu = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviation:\n* var sigma = scalar2ndarray( 1.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float64Results );\n* var out = new ndarray( Float64Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = ztest( [ x, out, alt, alpha, mu, sigma ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction ztest( arrays ) {\n\tvar alpha;\n\tvar sigma;\n\tvar alt;\n\tvar mu;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = ndarraylike2scalar( arrays[ 1 ] );\n\n\talt = ndarraylike2scalar( arrays[ 2 ] );\n\talpha = ndarraylike2scalar( arrays[ 3 ] );\n\tmu = ndarraylike2scalar( arrays[ 4 ] );\n\tsigma = ndarraylike2scalar( arrays[ 5 ] );\n\n\tstrided( numelDimension( x, 0 ), alt, alpha, mu, sigma, getData( x ), getStride( x, 0 ), getOffset( x ), y ); // eslint-disable-line max-len\n\n\treturn arrays[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default ztest;\n"],"names":["ztest","arrays","alpha","sigma","alt","mu","x","y","ndarraylike2scalar","strided","numelDimension","getData","getStride","getOffset"],"mappings":";;2kBAwFA,SAASA,EAAOC,GACf,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAYJ,OAVAD,EAAIL,EAAQ,GACZM,EAAIC,EAAoBP,EAAQ,IAEhCG,EAAMI,EAAoBP,EAAQ,IAClCC,EAAQM,EAAoBP,EAAQ,IACpCI,EAAKG,EAAoBP,EAAQ,IACjCE,EAAQK,EAAoBP,EAAQ,IAEpCQ,EAASC,EAAgBJ,EAAG,GAAKF,EAAKF,EAAOG,EAAIF,EAAOQ,EAASL,GAAKM,EAAWN,EAAG,GAAKO,EAAWP,GAAKC,GAElGN,EAAQ,EAChB"}